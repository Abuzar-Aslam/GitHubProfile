// Generated by Dagger (https://dagger.dev).
package home.assignemnt.domain.usecases;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import home.assignemnt.domain.repository.UserProfileRepository;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class UserProfileUseCase_Factory implements Factory<UserProfileUseCase> {
  private final Provider<UserProfileRepository> userProfileRepositoryProvider;

  public UserProfileUseCase_Factory(Provider<UserProfileRepository> userProfileRepositoryProvider) {
    this.userProfileRepositoryProvider = userProfileRepositoryProvider;
  }

  @Override
  public UserProfileUseCase get() {
    return newInstance(userProfileRepositoryProvider.get());
  }

  public static UserProfileUseCase_Factory create(
      Provider<UserProfileRepository> userProfileRepositoryProvider) {
    return new UserProfileUseCase_Factory(userProfileRepositoryProvider);
  }

  public static UserProfileUseCase newInstance(UserProfileRepository userProfileRepository) {
    return new UserProfileUseCase(userProfileRepository);
  }
}
